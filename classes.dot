digraph "classes" {
rankdir=BT
charset="utf-8"
"src.models.autoencoder.AE" [color="black", fontcolor="black", label=<{AE|criterion : MSELoss<br ALIGN="LEFT"/>decoder : Sequential<br ALIGN="LEFT"/>encoder : Sequential<br ALIGN="LEFT"/>optimizer : Adam<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>get_loss(x)<br ALIGN="LEFT"/>predict_scores(x)<br ALIGN="LEFT"/>process(x)<br ALIGN="LEFT"/>to_device(X)<br ALIGN="LEFT"/>train_step(X)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.arcus.ARCUS" [color="black", fontcolor="black", label=<{ARCUS|additional_params<br ALIGN="LEFT"/>device : str<br ALIGN="LEFT"/>model_pool : list<br ALIGN="LEFT"/>steps : int<br ALIGN="LEFT"/>|load_state_dict(state_dict)<br ALIGN="LEFT"/>process(x)<br ALIGN="LEFT"/>state_dict()<br ALIGN="LEFT"/>to_device(X)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.after_image.AfterImage" [color="black", fontcolor="black", label=<{AfterImage|count<br ALIGN="LEFT"/>decay_factors : list<br ALIGN="LEFT"/>limit : float<br ALIGN="LEFT"/>max_pkt : float<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>offset_time : int<br ALIGN="LEFT"/>skipped<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>|extract_features()<br ALIGN="LEFT"/>get_headers()<br ALIGN="LEFT"/>get_meta_headers()<br ALIGN="LEFT"/>get_traffic_vector(packet)<br ALIGN="LEFT"/>peek(traffic_vectors)<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>update(traffic_vector)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.after_image_graph.AfterImageGraph" [color="black", fontcolor="black", label=<{AfterImageGraph|clean_up_round : int<br ALIGN="LEFT"/>count<br ALIGN="LEFT"/>decay_factors : list<br ALIGN="LEFT"/>graph_type : str<br ALIGN="LEFT"/>max_pkt : float<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>offset_time<br ALIGN="LEFT"/>protocol_map<br ALIGN="LEFT"/>skipped<br ALIGN="LEFT"/>state : dict<br ALIGN="LEFT"/>|extract_features()<br ALIGN="LEFT"/>get_headers()<br ALIGN="LEFT"/>get_meta_headers()<br ALIGN="LEFT"/>get_traffic_vector(packet)<br ALIGN="LEFT"/><I>peek</I>(traffic_vectors)<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>update(traffic_vector)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.base_model.BaseModel" [color="black", fontcolor="black", label=<{BaseModel|<br ALIGN="LEFT"/>|preprocess(X)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.base_model.BaseODModel" [color="black", fontcolor="black", label=<{BaseODModel|threshold<br ALIGN="LEFT"/>|<I>on_train_begin</I>()<br ALIGN="LEFT"/><I>on_train_end</I>()<br ALIGN="LEFT"/><I>predict_labels</I>(X)<br ALIGN="LEFT"/><I>predict_scores</I>(X)<br ALIGN="LEFT"/><I>train_step</I>(X)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.base_model.BaseOnlineODModel" [color="black", fontcolor="black", label=<{BaseOnlineODModel|additional_params : list<br ALIGN="LEFT"/>converged : bool<br ALIGN="LEFT"/>loss_queue : deque<br ALIGN="LEFT"/>num_batch : int<br ALIGN="LEFT"/>scaler<br ALIGN="LEFT"/>|get_threshold()<br ALIGN="LEFT"/><I>process</I>(X)<br ALIGN="LEFT"/>standardize(x)<br ALIGN="LEFT"/>update_scaler(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.base_feature_extractor.BaseTrafficFeatureExtractor" [color="black", fontcolor="black", label=<{BaseTrafficFeatureExtractor|allowed : list<br ALIGN="LEFT"/>count : int<br ALIGN="LEFT"/>entry<br ALIGN="LEFT"/>feature_file<br ALIGN="LEFT"/>input_pcap : PcapReader<br ALIGN="LEFT"/>meta_file<br ALIGN="LEFT"/>offset_time : NoneType<br ALIGN="LEFT"/>offset_timestamp : bool<br ALIGN="LEFT"/>path : Path<br ALIGN="LEFT"/>reset_state : bool<br ALIGN="LEFT"/>skipped : int<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>|<I>extract_features</I>()<br ALIGN="LEFT"/><I>get_headers</I>()<br ALIGN="LEFT"/><I>get_meta_headers</I>()<br ALIGN="LEFT"/><I>get_traffic_vector</I>(packet)<br ALIGN="LEFT"/><I>peek</I>(traffic_vectors)<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>teardown()<br ALIGN="LEFT"/><I>update</I>(traffic_vector)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.gnnids.Classifier" [color="black", fontcolor="black", label=<{Classifier|act : Sigmoid<br ALIGN="LEFT"/>nn : Identity, MLP<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.base_model.DictSaveMixin" [color="black", fontcolor="black", label=<{DictSaveMixin|<br ALIGN="LEFT"/>|save(dataset_name, suffix)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.gnnids.Diffusion" [color="black", fontcolor="black", label=<{Diffusion|alpha<br ALIGN="LEFT"/>alpha_hat<br ALIGN="LEFT"/>beta<br ALIGN="LEFT"/>beta_end : float<br ALIGN="LEFT"/>beta_start : float<br ALIGN="LEFT"/>device : str<br ALIGN="LEFT"/>img_size : int<br ALIGN="LEFT"/>noise_steps : int<br ALIGN="LEFT"/>|noise_images(x, t)<br ALIGN="LEFT"/>prepare_noise_schedule()<br ALIGN="LEFT"/>sample(model, n)<br ALIGN="LEFT"/>sample_timesteps(n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.base_model.EnsembleSaveMixin" [color="black", fontcolor="black", label=<{EnsembleSaveMixin|<br ALIGN="LEFT"/>|save(dataset_name, suffix)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.gnnids.GATNodeEncoder" [color="black", fontcolor="black", label=<{GATNodeEncoder|edge_stats<br ALIGN="LEFT"/>l_features : NoneType<br ALIGN="LEFT"/>linear : Linear<br ALIGN="LEFT"/>model_name<br ALIGN="LEFT"/>node_embed : GAT<br ALIGN="LEFT"/>node_stats<br ALIGN="LEFT"/>sw_loss<br ALIGN="LEFT"/>|forward(x, edge_index, edge_attr)<br ALIGN="LEFT"/>preprocess_features(features, live_stats)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.gnnids.GCNNodeEncoder" [color="black", fontcolor="black", label=<{GCNNodeEncoder|edge_stats<br ALIGN="LEFT"/>l_features : NoneType<br ALIGN="LEFT"/>linear : Linear<br ALIGN="LEFT"/>model_name<br ALIGN="LEFT"/>node_embed : GCN<br ALIGN="LEFT"/>node_stats<br ALIGN="LEFT"/>sw_loss<br ALIGN="LEFT"/>|forward(x, edge_index, edge_attr)<br ALIGN="LEFT"/>preprocess_features(features, live_stats)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.base_model.GNNOCDModel" [color="black", fontcolor="black", label=<{GNNOCDModel|converged<br ALIGN="LEFT"/>gnn<br ALIGN="LEFT"/>gnn_cls<br ALIGN="LEFT"/>gnn_kwargs : dict<br ALIGN="LEFT"/>loss_queue<br ALIGN="LEFT"/>model_name<br ALIGN="LEFT"/>num_batch<br ALIGN="LEFT"/>od<br ALIGN="LEFT"/>od_cls<br ALIGN="LEFT"/>od_kwargs : dict<br ALIGN="LEFT"/>optimizer : Adam<br ALIGN="LEFT"/>save_module_names : list<br ALIGN="LEFT"/>save_modules : list<br ALIGN="LEFT"/>|load_state_dict(state_dict)<br ALIGN="LEFT"/>predict_scores(data)<br ALIGN="LEFT"/>state_dict()<br ALIGN="LEFT"/>train_step(data)<br ALIGN="LEFT"/>update_scaler(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.goad.GOAD" [color="black", fontcolor="black", label=<{GOAD|act : str<br ALIGN="LEFT"/>affine_weights<br ALIGN="LEFT"/>alpha : float<br ALIGN="LEFT"/>bias : bool<br ALIGN="LEFT"/>criterion<br ALIGN="LEFT"/>device : str<br ALIGN="LEFT"/>eps : int<br ALIGN="LEFT"/>hidden_dim : int<br ALIGN="LEFT"/>kernel_size : int<br ALIGN="LEFT"/>margin : float<br ALIGN="LEFT"/>n_layers : int<br ALIGN="LEFT"/>n_trans : int<br ALIGN="LEFT"/>nb : int<br ALIGN="LEFT"/>net<br ALIGN="LEFT"/>optimizer : Adam<br ALIGN="LEFT"/>preprocessors : list<br ALIGN="LEFT"/>rep_means : NoneType<br ALIGN="LEFT"/>threshold<br ALIGN="LEFT"/>trans_dim : int<br ALIGN="LEFT"/>|forward(X)<br ALIGN="LEFT"/>get_loss(X)<br ALIGN="LEFT"/>goad_transforms(X)<br ALIGN="LEFT"/>load_state_dict(state_dict)<br ALIGN="LEFT"/>on_train_begin()<br ALIGN="LEFT"/>on_train_end()<br ALIGN="LEFT"/>predict_scores(X)<br ALIGN="LEFT"/>process(X)<br ALIGN="LEFT"/>state_dict()<br ALIGN="LEFT"/>to_device(X)<br ALIGN="LEFT"/>train_step(X)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.gnnids.GaussianFourierProjection" [color="black", fontcolor="black", label=<{GaussianFourierProjection|W : NoneType<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.goad.GoadLoss" [color="black", fontcolor="black", label=<{GoadLoss|alpha : float<br ALIGN="LEFT"/>ce_criterion : CrossEntropyLoss<br ALIGN="LEFT"/>device : str<br ALIGN="LEFT"/>margin : float<br ALIGN="LEFT"/>|forward(rep, pred, labels)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.goad.GoadNet" [color="black", fontcolor="black", label=<{GoadNet|enc : ConvNet<br ALIGN="LEFT"/>head : Sequential<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.synthetic_graph_features.Graph" [color="black", fontcolor="black", label=<{Graph|connections : list, ndarray<br ALIGN="LEFT"/>drifts : list<br ALIGN="LEFT"/>feature_file<br ALIGN="LEFT"/>meta_file<br ALIGN="LEFT"/>node_dim<br ALIGN="LEFT"/>node_list<br ALIGN="LEFT"/>rng<br ALIGN="LEFT"/>|add_edge()<br ALIGN="LEFT"/>alter_edge()<br ALIGN="LEFT"/>apply_drift()<br ALIGN="LEFT"/>change_mean()<br ALIGN="LEFT"/>change_std()<br ALIGN="LEFT"/>gen_connections(duration)<br ALIGN="LEFT"/>new_node()<br ALIGN="LEFT"/>rand_edge()<br ALIGN="LEFT"/>rand_mean()<br ALIGN="LEFT"/>rand_node()<br ALIGN="LEFT"/>rand_std()<br ALIGN="LEFT"/>remove_edge()<br ALIGN="LEFT"/>simulate(num_drifts)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.gnnids.HomoGNN" [color="black", fontcolor="black", label=<{HomoGNN|G : Data<br ALIGN="LEFT"/>device : str<br ALIGN="LEFT"/>l_features : int<br ALIGN="LEFT"/>mac_device_map : dict<br ALIGN="LEFT"/>n_features : int<br ALIGN="LEFT"/>processed : int<br ALIGN="LEFT"/>subset : NoneType<br ALIGN="LEFT"/>|get_graph_state()<br ALIGN="LEFT"/>load_state_dict(state_dict)<br ALIGN="LEFT"/>sample_edges(p)<br ALIGN="LEFT"/>split_data(x)<br ALIGN="LEFT"/>state_dict()<br ALIGN="LEFT"/>to_device(x)<br ALIGN="LEFT"/>update_edges(srcID, dstID, protocol, edge_feature)<br ALIGN="LEFT"/>update_graph(x)<br ALIGN="LEFT"/>update_node_score(score)<br ALIGN="LEFT"/>update_nodes(srcID, src_feature, dstID, dst_feature)<br ALIGN="LEFT"/>update_threshold(threshold)<br ALIGN="LEFT"/>visualize_graph(fig, ax, node_map)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.icl.ICL" [color="black", fontcolor="black", label=<{ICL|act : str<br ALIGN="LEFT"/>bias : bool<br ALIGN="LEFT"/>criterion : CrossEntropyLoss<br ALIGN="LEFT"/>device : str<br ALIGN="LEFT"/>hidden_dims : str<br ALIGN="LEFT"/>kernel_size : int, str<br ALIGN="LEFT"/>max_negatives : int<br ALIGN="LEFT"/>net<br ALIGN="LEFT"/>optimizer : Adam<br ALIGN="LEFT"/>rep_dim : int<br ALIGN="LEFT"/>tau : float<br ALIGN="LEFT"/>|cal_logit(query, pos)<br ALIGN="LEFT"/>forward(X)<br ALIGN="LEFT"/>get_loss(X)<br ALIGN="LEFT"/>load_state_dict(state_dict)<br ALIGN="LEFT"/>predict_scores(X)<br ALIGN="LEFT"/>process(X)<br ALIGN="LEFT"/>state_dict()<br ALIGN="LEFT"/>to_device(X)<br ALIGN="LEFT"/>train_step(X)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.icl.ICLNet" [color="black", fontcolor="black", label=<{ICLNet|all_idx<br ALIGN="LEFT"/>all_idx_complement<br ALIGN="LEFT"/>enc_f_net : MLPnet<br ALIGN="LEFT"/>enc_g_net : MLPnet<br ALIGN="LEFT"/>kernel_size<br ALIGN="LEFT"/>n_features<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>positive_matrix_builder(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.datasets.custom_dataset.InMemoryCSVDataset" [color="black", fontcolor="black", label=<{InMemoryCSVDataset|data : NoneType, TextFileReader<br ALIGN="LEFT"/>dataset_name<br ALIGN="LEFT"/>fe_name<br ALIGN="LEFT"/>feature_path<br ALIGN="LEFT"/>file_name<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.feature_extractors.after_image.IncStat1D" [color="black", fontcolor="black", label=<{IncStat1D|decay_factors : ndarray<br ALIGN="LEFT"/>incremental_statistics<br ALIGN="LEFT"/>last_timestamp<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>weight_thresh : float<br ALIGN="LEFT"/>|all_stats_1D()<br ALIGN="LEFT"/>decay(t)<br ALIGN="LEFT"/>insert(t, v)<br ALIGN="LEFT"/>is_outdated(t)<br ALIGN="LEFT"/>mean()<br ALIGN="LEFT"/>std()<br ALIGN="LEFT"/>var()<br ALIGN="LEFT"/>weight()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.after_image.IncStat2D" [color="black", fontcolor="black", label=<{IncStat2D|decay_factors<br ALIGN="LEFT"/>eps : float<br ALIGN="LEFT"/>inc_stats1<br ALIGN="LEFT"/>inc_stats2<br ALIGN="LEFT"/>last_timestamp<br ALIGN="LEFT"/>sum_of_residual : ndarray<br ALIGN="LEFT"/>|all_stats_2D()<br ALIGN="LEFT"/>cov()<br ALIGN="LEFT"/>decay(t)<br ALIGN="LEFT"/>pcc()<br ALIGN="LEFT"/>update_cov(t, v)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.after_image.IncStatDB" [color="black", fontcolor="black", label=<{IncStatDB|decay_factors<br ALIGN="LEFT"/>limit : float<br ALIGN="LEFT"/>num_entries : int<br ALIGN="LEFT"/>num_updated : int<br ALIGN="LEFT"/>stat1d : dict<br ALIGN="LEFT"/>stat2d : dict<br ALIGN="LEFT"/>|clean_records(t)<br ALIGN="LEFT"/>update_get_link_stats(ID1, ID2, t, v)<br ALIGN="LEFT"/>update_get_stats_1D(ID, t, v)<br ALIGN="LEFT"/>update_get_stats_2D(ID1, ID2, t, v)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.pyflowmeter.IncStats" [color="black", fontcolor="black", label=<{IncStats|eps : float<br ALIGN="LEFT"/>m : int<br ALIGN="LEFT"/>m2 : int<br ALIGN="LEFT"/>m3 : int<br ALIGN="LEFT"/>m4 : int<br ALIGN="LEFT"/>max<br ALIGN="LEFT"/>min : float<br ALIGN="LEFT"/>n : int<br ALIGN="LEFT"/>|get_statistics()<br ALIGN="LEFT"/>update(x, verbose)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.gnnids.IoULoss" [color="black", fontcolor="black", label=<{IoULoss|<br ALIGN="LEFT"/>|edges_to_adjacency(edges, num_nodes)<br ALIGN="LEFT"/>forward(edges1, edges2, num_nodes)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.datasets.custom_dataset.IterativeCSVDataset" [color="black", fontcolor="black", label=<{IterativeCSVDataset|chunksize : int<br ALIGN="LEFT"/>data : NoneType, TextFileReader<br ALIGN="LEFT"/>dataset_name<br ALIGN="LEFT"/>epochs : int<br ALIGN="LEFT"/>fe_name<br ALIGN="LEFT"/>feature_path<br ALIGN="LEFT"/>file_name<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>nb_samples : NoneType<br ALIGN="LEFT"/>skip_rows : int<br ALIGN="LEFT"/>|reset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.utils.JSONEncoder" [color="black", fontcolor="black", label=<{JSONEncoder|<br ALIGN="LEFT"/>|default(obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.kitsune.KitNET" [color="black", fontcolor="black", label=<{KitNET|AD_grace_period : int<br ALIGN="LEFT"/>FM<br ALIGN="LEFT"/>FM_grace_period : int<br ALIGN="LEFT"/>ensembleLayer : list<br ALIGN="LEFT"/>hr : float<br ALIGN="LEFT"/>input_precision : NoneType<br ALIGN="LEFT"/>lr : float<br ALIGN="LEFT"/>m : int<br ALIGN="LEFT"/>n_executed : int<br ALIGN="LEFT"/>n_trained : int<br ALIGN="LEFT"/>outputLayer : NoneType<br ALIGN="LEFT"/>quantize : NoneType<br ALIGN="LEFT"/>v : NoneType, list<br ALIGN="LEFT"/>|execute(x)<br ALIGN="LEFT"/>get_params()<br ALIGN="LEFT"/>predict_scores(X)<br ALIGN="LEFT"/>process(X)<br ALIGN="LEFT"/>set_params(new_param)<br ALIGN="LEFT"/>to_device(X)<br ALIGN="LEFT"/>train_single(X)<br ALIGN="LEFT"/>train_step(X)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.utils.LazyInitializationMixin" [color="black", fontcolor="black", label=<{LazyInitializationMixin|<br ALIGN="LEFT"/>|lazy_init()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.gnnids.LinearNodeEncoder" [color="black", fontcolor="black", label=<{LinearNodeEncoder|edge_stats<br ALIGN="LEFT"/>l_features : NoneType<br ALIGN="LEFT"/>linear : Linear<br ALIGN="LEFT"/>model_name<br ALIGN="LEFT"/>node_embed : MLP<br ALIGN="LEFT"/>node_stats<br ALIGN="LEFT"/>sw_loss<br ALIGN="LEFT"/>|forward(x, edge_index, edge_attr)<br ALIGN="LEFT"/>preprocess_features(features, live_stats)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.utils.LivePercentile" [color="black", fontcolor="black", label=<{LivePercentile|dims<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>patience : int<br ALIGN="LEFT"/>|add(item)<br ALIGN="LEFT"/>of_centroids(dim_list)<br ALIGN="LEFT"/>quantiles(p)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>to_centroids()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.base_model.MixtureSaveMixin" [color="black", fontcolor="black", label=<{MixtureSaveMixin|<br ALIGN="LEFT"/>|save(dataset_name, suffix)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.arcus.ModelGenerator" [color="black", fontcolor="black", label=<{ModelGenerator|RSRAE_hidden_layer_size<br ALIGN="LEFT"/>input_dim<br ALIGN="LEFT"/>intrinsic_size<br ALIGN="LEFT"/>layer_size : list<br ALIGN="LEFT"/>learning_rate<br ALIGN="LEFT"/>model_type<br ALIGN="LEFT"/>|init_model()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.base_model.MultiLayerOCDModel" [color="black", fontcolor="black", label=<{MultiLayerOCDModel|base_model_name<br ALIGN="LEFT"/>batch_num : int<br ALIGN="LEFT"/>model_name<br ALIGN="LEFT"/>model_names : list<br ALIGN="LEFT"/>model_pool : list<br ALIGN="LEFT"/>processed : int<br ALIGN="LEFT"/>protocol_inv<br ALIGN="LEFT"/>protocols<br ALIGN="LEFT"/>|process(x)<br ALIGN="LEFT"/>save_graph(dataset_name, fe_name, file_name, protocol)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.after_image.NetStat" [color="black", fontcolor="black", label=<{NetStat|clean_up_round : int<br ALIGN="LEFT"/>decay_factors : list<br ALIGN="LEFT"/>inc_stat_db<br ALIGN="LEFT"/>last_timestamp : NoneType<br ALIGN="LEFT"/>|get_records(traffic_vectors)<br ALIGN="LEFT"/>update_get_stats(IPtype, srcMAC, dstMAC, srcIP, srcProtocol, dstIP, dstProtocol, timestamp, datagramSize, db)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.synthetic_graph_features.Node" [color="black", fontcolor="black", label=<{Node|dim<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>mean<br ALIGN="LEFT"/>rng<br ALIGN="LEFT"/>std<br ALIGN="LEFT"/>|gen_correlated_feature()<br ALIGN="LEFT"/>gen_random_feature()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.gnnids.NoisePredictor" [color="black", fontcolor="black", label=<{NoisePredictor|dec2<br ALIGN="LEFT"/>dec3<br ALIGN="LEFT"/>dec4<br ALIGN="LEFT"/>device : str<br ALIGN="LEFT"/>emb_layer : Sequential<br ALIGN="LEFT"/>enc1<br ALIGN="LEFT"/>enc2<br ALIGN="LEFT"/>enc3<br ALIGN="LEFT"/>out : Linear<br ALIGN="LEFT"/>pos_encoding<br ALIGN="LEFT"/>|forward(x, t)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.base_model.OnlineCDModel" [color="black", fontcolor="black", label=<{OnlineCDModel|base_model_cls<br ALIGN="LEFT"/>base_model_config<br ALIGN="LEFT"/>base_model_name : str<br ALIGN="LEFT"/>confidence<br ALIGN="LEFT"/>ensemble_size : int<br ALIGN="LEFT"/>graph_state<br ALIGN="LEFT"/>loss_queue : deque<br ALIGN="LEFT"/>max_model_pool_size : int<br ALIGN="LEFT"/>model_idx : int<br ALIGN="LEFT"/>model_name : str<br ALIGN="LEFT"/>model_names : list<br ALIGN="LEFT"/>model_pool : list<br ALIGN="LEFT"/>num_batch : int<br ALIGN="LEFT"/>patience<br ALIGN="LEFT"/>potential_queue : deque<br ALIGN="LEFT"/>potential_x_queue : deque<br ALIGN="LEFT"/>time_since_last_drift : int<br ALIGN="LEFT"/>|cd(score, threshold, x)<br ALIGN="LEFT"/>clear_potential_queue()<br ALIGN="LEFT"/>create_model()<br ALIGN="LEFT"/>next_model()<br ALIGN="LEFT"/>process(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.base_model.PickleSaveMixin" [color="black", fontcolor="black", label=<{PickleSaveMixin|<br ALIGN="LEFT"/>|save(dataset_name, suffix)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.gnnids.PositionalEncoding" [color="black", fontcolor="black", label=<{PositionalEncoding|pos_embeddings<br ALIGN="LEFT"/>|forward(t)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.pyflowmeter.PyFlowMeter" [color="black", fontcolor="black", label=<{PyFlowMeter|check_interval : int<br ALIGN="LEFT"/>check_range : int<br ALIGN="LEFT"/>count<br ALIGN="LEFT"/>flags : list<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>offset_time : int<br ALIGN="LEFT"/>skipped<br ALIGN="LEFT"/>state : dict<br ALIGN="LEFT"/>timeout : int<br ALIGN="LEFT"/>written<br ALIGN="LEFT"/>|decode_flags(flag)<br ALIGN="LEFT"/>extract_features()<br ALIGN="LEFT"/>get_headers()<br ALIGN="LEFT"/>get_meta_headers()<br ALIGN="LEFT"/>get_traffic_vector(packet)<br ALIGN="LEFT"/><I>peek</I>(traffic_vectors)<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>teardown()<br ALIGN="LEFT"/>update(traffic_vector)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.arcus.RAPP" [color="black", fontcolor="black", label=<{RAPP|H : list<br ALIGN="LEFT"/>bn : bool<br ALIGN="LEFT"/>decoder : Sequential<br ALIGN="LEFT"/>decoder_layers : ModuleList<br ALIGN="LEFT"/>encoder : Sequential<br ALIGN="LEFT"/>encoder_layers : ModuleList<br ALIGN="LEFT"/>loss : MSELoss<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>num_batch : int<br ALIGN="LEFT"/>optimizer : Adam<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>get_hidden_set(x)<br ALIGN="LEFT"/>get_latent(x)<br ALIGN="LEFT"/>inference_step(x)<br ALIGN="LEFT"/>train_step(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.rrcf.RRCF" [color="black", fontcolor="black", label=<{RRCF|forest : list<br ALIGN="LEFT"/>index : int<br ALIGN="LEFT"/>model_name : str<br ALIGN="LEFT"/>num_trees : int<br ALIGN="LEFT"/>tree_size : int<br ALIGN="LEFT"/>|load_dict(d)<br ALIGN="LEFT"/>process(X)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.gnnids.ReluBlock" [color="black", fontcolor="black", label=<{ReluBlock|dense : Linear<br ALIGN="LEFT"/>linear : Linear<br ALIGN="LEFT"/>relu : ReLU<br ALIGN="LEFT"/>|forward(x, t)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.slad.SLAD" [color="black", fontcolor="black", label=<{SLAD|act : str<br ALIGN="LEFT"/>additional_params<br ALIGN="LEFT"/>affine_network_lst : dict<br ALIGN="LEFT"/>criterion<br ALIGN="LEFT"/>device : str<br ALIGN="LEFT"/>distribution_size : int<br ALIGN="LEFT"/>f_weight<br ALIGN="LEFT"/>hidden_dims : int<br ALIGN="LEFT"/>len_pool<br ALIGN="LEFT"/>magnify_factor : int<br ALIGN="LEFT"/>max_subspace_len : NoneType<br ALIGN="LEFT"/>n_slad_ensemble : int<br ALIGN="LEFT"/>n_unified_features : int<br ALIGN="LEFT"/>net : MLPnet<br ALIGN="LEFT"/>optimizer : Adam<br ALIGN="LEFT"/>sampling_size : NoneType, int<br ALIGN="LEFT"/>subspace_indices_lst : list<br ALIGN="LEFT"/>subspace_pool_size : int<br ALIGN="LEFT"/>|adaptively_setting()<br ALIGN="LEFT"/>forward(X)<br ALIGN="LEFT"/>get_loss(X)<br ALIGN="LEFT"/>load_state_dict(state_dict)<br ALIGN="LEFT"/>predict_scores(X)<br ALIGN="LEFT"/>process(X)<br ALIGN="LEFT"/>state_dict()<br ALIGN="LEFT"/>to_device(X)<br ALIGN="LEFT"/>train_step(X)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.slad.SLADLoss" [color="black", fontcolor="black", label=<{SLADLoss|kl : KLDivLoss<br ALIGN="LEFT"/>reduction : str<br ALIGN="LEFT"/>|forward(y_pred, y_true)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.misc_models.SOM" [color="black", fontcolor="black", label=<{SOM|model : MiniSom<br ALIGN="LEFT"/>model_name : str<br ALIGN="LEFT"/>preprocessors : list<br ALIGN="LEFT"/>|predict_labels(X)<br ALIGN="LEFT"/>predict_scores(X)<br ALIGN="LEFT"/>train(X)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.gnnids.SWLoss" [color="black", fontcolor="black", label=<{SWLoss|shape<br ALIGN="LEFT"/>slices<br ALIGN="LEFT"/>|forward(encoded)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.gnnids.ScoreNet" [color="black", fontcolor="black", label=<{ScoreNet|act : SiLU<br ALIGN="LEFT"/>dec2<br ALIGN="LEFT"/>dec3<br ALIGN="LEFT"/>dec4<br ALIGN="LEFT"/>device : str<br ALIGN="LEFT"/>embed : Sequential<br ALIGN="LEFT"/>enc1<br ALIGN="LEFT"/>enc2<br ALIGN="LEFT"/>enc3<br ALIGN="LEFT"/>marginal_prob_std<br ALIGN="LEFT"/>out : Linear<br ALIGN="LEFT"/>|forward(x, t)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.sklearn_models.SklearnClassifier" [color="black", fontcolor="black", label=<{SklearnClassifier|classes : list<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>model_name<br ALIGN="LEFT"/>preprocessors : list<br ALIGN="LEFT"/>training_call<br ALIGN="LEFT"/>|predict_scores(X)<br ALIGN="LEFT"/>train(X)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.sklearn_models.SklearnOutlierDetector" [color="black", fontcolor="black", label=<{SklearnOutlierDetector|adjust : int<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>model_name<br ALIGN="LEFT"/>preprocessors : list<br ALIGN="LEFT"/>threshold : NoneType<br ALIGN="LEFT"/>training_call<br ALIGN="LEFT"/>|predict_labels(X)<br ALIGN="LEFT"/>predict_scores(X)<br ALIGN="LEFT"/>train_step(X)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.pyflowmeter.StreamingInterface" [color="black", fontcolor="black", label=<{StreamingInterface|<br ALIGN="LEFT"/>|<I>attach</I>()<br ALIGN="LEFT"/><I>detach</I>()<br ALIGN="LEFT"/><I>start</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.synthetic_graph_features.SyntheticFeatureExtractor" [color="black", fontcolor="black", label=<{SyntheticFeatureExtractor|count : int<br ALIGN="LEFT"/>dataset_name<br ALIGN="LEFT"/>feature_file<br ALIGN="LEFT"/>file_name<br ALIGN="LEFT"/>g<br ALIGN="LEFT"/>meta_file<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|generate_features(n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.base_model.TorchSaveMixin" [color="black", fontcolor="black", label=<{TorchSaveMixin|<br ALIGN="LEFT"/>|<I>load_state_dict</I>(state_dict)<br ALIGN="LEFT"/>save(dataset_name, suffix)<br ALIGN="LEFT"/><I>state_dict</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.autoencoder.VAE" [color="black", fontcolor="black", label=<{VAE|decoder : Sequential<br ALIGN="LEFT"/>encoder : Sequential<br ALIGN="LEFT"/>fc_logvar : Linear<br ALIGN="LEFT"/>fc_mu : Linear<br ALIGN="LEFT"/>kl_div : KLDivLoss<br ALIGN="LEFT"/>mse : MSELoss<br ALIGN="LEFT"/>optimizer : Adam<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>get_loss(x)<br ALIGN="LEFT"/>predict_scores(x)<br ALIGN="LEFT"/>process(x)<br ALIGN="LEFT"/>reparameterize(mu, logvar)<br ALIGN="LEFT"/>to_device(X)<br ALIGN="LEFT"/>train_step(X)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.gnnids.VariationalGATEncoder" [color="black", fontcolor="black", label=<{VariationalGATEncoder|gcn_logvar : GCNConv<br ALIGN="LEFT"/>gcn_mu : GCNConv<br ALIGN="LEFT"/>gcn_shared : GCNConv<br ALIGN="LEFT"/>|forward(x, edge_index, edge_attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.kitsune.corClust" [color="black", fontcolor="black", label=<{corClust|C : ndarray<br ALIGN="LEFT"/>N : int<br ALIGN="LEFT"/>c : ndarray<br ALIGN="LEFT"/>c_r : ndarray<br ALIGN="LEFT"/>c_rs : ndarray<br ALIGN="LEFT"/>n<br ALIGN="LEFT"/>|cluster(maxClust)<br ALIGN="LEFT"/>corrDist()<br ALIGN="LEFT"/>update(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.kitsune.dA" [color="black", fontcolor="black", label=<{dA|W : ndarray<br ALIGN="LEFT"/>hbias : ndarray<br ALIGN="LEFT"/>n : int<br ALIGN="LEFT"/>norm_max<br ALIGN="LEFT"/>norm_min<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>rng<br ALIGN="LEFT"/>vbias : ndarray<br ALIGN="LEFT"/>|execute(x)<br ALIGN="LEFT"/>get_corrupted_input(input, corruption_level)<br ALIGN="LEFT"/>get_hidden_values(input)<br ALIGN="LEFT"/>get_params()<br ALIGN="LEFT"/>get_reconstructed_input(hidden)<br ALIGN="LEFT"/>inGrace()<br ALIGN="LEFT"/>reconstruct(x)<br ALIGN="LEFT"/>set_params(new_param)<br ALIGN="LEFT"/>train(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.models.kitsune.dA_params" [color="black", fontcolor="black", label=<{dA_params|corruption_level : float<br ALIGN="LEFT"/>gracePeriod : int<br ALIGN="LEFT"/>hiddenRatio : NoneType<br ALIGN="LEFT"/>input_precision : NoneType<br ALIGN="LEFT"/>lr : float<br ALIGN="LEFT"/>n_hidden : int<br ALIGN="LEFT"/>n_visible : int<br ALIGN="LEFT"/>q_abit<br ALIGN="LEFT"/>q_wbit<br ALIGN="LEFT"/>quantize : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.models.kitsune.rollmean" [color="black", fontcolor="black", label=<{rollmean|pointer : int<br ALIGN="LEFT"/>window : ndarray<br ALIGN="LEFT"/>winsize<br ALIGN="LEFT"/>|apply(newval)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.after_image.AfterImage" -> "src.feature_extractors.base_feature_extractor.BaseTrafficFeatureExtractor" [arrowhead="empty", arrowtail="none"];
"src.feature_extractors.after_image_graph.AfterImageGraph" -> "src.feature_extractors.base_feature_extractor.BaseTrafficFeatureExtractor" [arrowhead="empty", arrowtail="none"];
"src.feature_extractors.pyflowmeter.PyFlowMeter" -> "src.feature_extractors.base_feature_extractor.BaseTrafficFeatureExtractor" [arrowhead="empty", arrowtail="none"];
"src.models.arcus.ARCUS" -> "src.models.base_model.BaseOnlineODModel" [arrowhead="empty", arrowtail="none"];
"src.models.arcus.ARCUS" -> "src.models.base_model.TorchSaveMixin" [arrowhead="empty", arrowtail="none"];
"src.models.autoencoder.AE" -> "src.models.base_model.BaseOnlineODModel" [arrowhead="empty", arrowtail="none"];
"src.models.autoencoder.AE" -> "src.models.base_model.TorchSaveMixin" [arrowhead="empty", arrowtail="none"];
"src.models.autoencoder.VAE" -> "src.models.base_model.BaseOnlineODModel" [arrowhead="empty", arrowtail="none"];
"src.models.autoencoder.VAE" -> "src.models.base_model.TorchSaveMixin" [arrowhead="empty", arrowtail="none"];
"src.models.base_model.BaseODModel" -> "src.models.base_model.BaseModel" [arrowhead="empty", arrowtail="none"];
"src.models.base_model.BaseOnlineODModel" -> "src.models.base_model.BaseModel" [arrowhead="empty", arrowtail="none"];
"src.models.base_model.GNNOCDModel" -> "src.models.base_model.MixtureSaveMixin" [arrowhead="empty", arrowtail="none"];
"src.models.base_model.MultiLayerOCDModel" -> "src.models.base_model.EnsembleSaveMixin" [arrowhead="empty", arrowtail="none"];
"src.models.base_model.OnlineCDModel" -> "src.models.base_model.EnsembleSaveMixin" [arrowhead="empty", arrowtail="none"];
"src.models.gnnids.GATNodeEncoder" -> "src.models.base_model.TorchSaveMixin" [arrowhead="empty", arrowtail="none"];
"src.models.gnnids.GCNNodeEncoder" -> "src.models.base_model.TorchSaveMixin" [arrowhead="empty", arrowtail="none"];
"src.models.gnnids.HomoGNN" -> "src.models.base_model.TorchSaveMixin" [arrowhead="empty", arrowtail="none"];
"src.models.gnnids.LinearNodeEncoder" -> "src.models.base_model.TorchSaveMixin" [arrowhead="empty", arrowtail="none"];
"src.models.goad.GOAD" -> "src.models.base_model.BaseOnlineODModel" [arrowhead="empty", arrowtail="none"];
"src.models.goad.GOAD" -> "src.models.base_model.TorchSaveMixin" [arrowhead="empty", arrowtail="none"];
"src.models.icl.ICL" -> "src.models.base_model.BaseOnlineODModel" [arrowhead="empty", arrowtail="none"];
"src.models.icl.ICL" -> "src.models.base_model.TorchSaveMixin" [arrowhead="empty", arrowtail="none"];
"src.models.slad.SLAD" -> "src.models.base_model.BaseOnlineODModel" [arrowhead="empty", arrowtail="none"];
"src.models.slad.SLAD" -> "src.models.base_model.TorchSaveMixin" [arrowhead="empty", arrowtail="none"];
"src.feature_extractors.after_image.IncStatDB" -> "src.feature_extractors.after_image.NetStat" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inc_stat_db", style="solid"];
"src.feature_extractors.after_image.NetStat" -> "src.feature_extractors.after_image.AfterImage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="state", style="solid"];
"src.feature_extractors.synthetic_graph_features.Graph" -> "src.feature_extractors.synthetic_graph_features.SyntheticFeatureExtractor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="g", style="solid"];
"src.models.arcus.ModelGenerator" -> "src.models.arcus.ARCUS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model_generator", style="solid"];
"src.models.gnnids.PositionalEncoding" -> "src.models.gnnids.NoisePredictor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pos_encoding", style="solid"];
"src.models.gnnids.ReluBlock" -> "src.models.gnnids.NoisePredictor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enc1", style="solid"];
"src.models.gnnids.ReluBlock" -> "src.models.gnnids.NoisePredictor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enc2", style="solid"];
"src.models.gnnids.ReluBlock" -> "src.models.gnnids.NoisePredictor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enc3", style="solid"];
"src.models.gnnids.ReluBlock" -> "src.models.gnnids.NoisePredictor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dec2", style="solid"];
"src.models.gnnids.ReluBlock" -> "src.models.gnnids.NoisePredictor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dec3", style="solid"];
"src.models.gnnids.ReluBlock" -> "src.models.gnnids.NoisePredictor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dec4", style="solid"];
"src.models.gnnids.ReluBlock" -> "src.models.gnnids.ScoreNet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enc1", style="solid"];
"src.models.gnnids.ReluBlock" -> "src.models.gnnids.ScoreNet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enc2", style="solid"];
"src.models.gnnids.ReluBlock" -> "src.models.gnnids.ScoreNet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enc3", style="solid"];
"src.models.gnnids.ReluBlock" -> "src.models.gnnids.ScoreNet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dec2", style="solid"];
"src.models.gnnids.ReluBlock" -> "src.models.gnnids.ScoreNet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dec3", style="solid"];
"src.models.gnnids.ReluBlock" -> "src.models.gnnids.ScoreNet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dec4", style="solid"];
"src.models.gnnids.SWLoss" -> "src.models.gnnids.GATNodeEncoder" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sw_loss", style="solid"];
"src.models.gnnids.SWLoss" -> "src.models.gnnids.GCNNodeEncoder" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sw_loss", style="solid"];
"src.models.gnnids.SWLoss" -> "src.models.gnnids.LinearNodeEncoder" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sw_loss", style="solid"];
"src.models.goad.GoadLoss" -> "src.models.goad.GOAD" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="criterion", style="solid"];
"src.models.goad.GoadNet" -> "src.models.goad.GOAD" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="net", style="solid"];
"src.models.icl.ICLNet" -> "src.models.icl.ICL" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="net", style="solid"];
"src.models.kitsune.corClust" -> "src.models.kitsune.KitNET" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="FM", style="solid"];
"src.models.kitsune.dA" -> "src.models.kitsune.KitNET" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="outputLayer", style="solid"];
"src.models.slad.SLADLoss" -> "src.models.slad.SLAD" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="criterion", style="solid"];
}
