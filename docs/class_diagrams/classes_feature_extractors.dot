digraph "classes_feature_extractors" {
rankdir=BT
charset="utf-8"
"src.feature_extractors.after_image.AfterImage" [color="black", fontcolor="black", label=<{AfterImage|count<br ALIGN="LEFT"/>decay_factors : list<br ALIGN="LEFT"/>limit : float<br ALIGN="LEFT"/>max_pkt : float<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>offset_time : int<br ALIGN="LEFT"/>skipped<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>|extract_features()<br ALIGN="LEFT"/>get_headers()<br ALIGN="LEFT"/>get_meta_headers()<br ALIGN="LEFT"/>get_traffic_vector(packet)<br ALIGN="LEFT"/>peek(traffic_vectors)<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>update(traffic_vector)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.after_image_graph.AfterImageGraph" [color="black", fontcolor="black", label=<{AfterImageGraph|clean_up_round : int<br ALIGN="LEFT"/>count<br ALIGN="LEFT"/>decay_factors : list<br ALIGN="LEFT"/>graph_type : str<br ALIGN="LEFT"/>max_pkt : float<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>offset_time<br ALIGN="LEFT"/>protocol_map<br ALIGN="LEFT"/>skipped<br ALIGN="LEFT"/>state : dict<br ALIGN="LEFT"/>|extract_features()<br ALIGN="LEFT"/>get_headers()<br ALIGN="LEFT"/>get_meta_headers()<br ALIGN="LEFT"/>get_traffic_vector(packet)<br ALIGN="LEFT"/><I>peek</I>(traffic_vectors)<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>update(traffic_vector)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.base_feature_extractor.BaseTrafficFeatureExtractor" [color="black", fontcolor="black", label=<{BaseTrafficFeatureExtractor|allowed : list<br ALIGN="LEFT"/>count : int<br ALIGN="LEFT"/>entry<br ALIGN="LEFT"/>feature_file<br ALIGN="LEFT"/>input_pcap : PcapReader<br ALIGN="LEFT"/>meta_file<br ALIGN="LEFT"/>offset_time : NoneType<br ALIGN="LEFT"/>offset_timestamp : bool<br ALIGN="LEFT"/>path : Path<br ALIGN="LEFT"/>reset_state : bool<br ALIGN="LEFT"/>skipped : int<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>|<I>extract_features</I>()<br ALIGN="LEFT"/><I>get_headers</I>()<br ALIGN="LEFT"/><I>get_meta_headers</I>()<br ALIGN="LEFT"/><I>get_traffic_vector</I>(packet)<br ALIGN="LEFT"/><I>peek</I>(traffic_vectors)<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>teardown()<br ALIGN="LEFT"/><I>update</I>(traffic_vector)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.synthetic_graph_features.Graph" [color="black", fontcolor="black", label=<{Graph|connections : list, ndarray<br ALIGN="LEFT"/>drifts : list<br ALIGN="LEFT"/>feature_file<br ALIGN="LEFT"/>meta_file<br ALIGN="LEFT"/>node_dim<br ALIGN="LEFT"/>node_list<br ALIGN="LEFT"/>rng<br ALIGN="LEFT"/>|add_edge()<br ALIGN="LEFT"/>alter_edge()<br ALIGN="LEFT"/>apply_drift()<br ALIGN="LEFT"/>change_mean()<br ALIGN="LEFT"/>change_std()<br ALIGN="LEFT"/>gen_connections(duration)<br ALIGN="LEFT"/>new_node()<br ALIGN="LEFT"/>rand_edge()<br ALIGN="LEFT"/>rand_mean()<br ALIGN="LEFT"/>rand_node()<br ALIGN="LEFT"/>rand_std()<br ALIGN="LEFT"/>remove_edge()<br ALIGN="LEFT"/>simulate(num_drifts)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.after_image.IncStat1D" [color="black", fontcolor="black", label=<{IncStat1D|decay_factors : ndarray<br ALIGN="LEFT"/>incremental_statistics<br ALIGN="LEFT"/>last_timestamp<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>weight_thresh : float<br ALIGN="LEFT"/>|all_stats_1D()<br ALIGN="LEFT"/>decay(t)<br ALIGN="LEFT"/>insert(t, v)<br ALIGN="LEFT"/>is_outdated(t)<br ALIGN="LEFT"/>mean()<br ALIGN="LEFT"/>std()<br ALIGN="LEFT"/>var()<br ALIGN="LEFT"/>weight()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.after_image.IncStat2D" [color="black", fontcolor="black", label=<{IncStat2D|decay_factors<br ALIGN="LEFT"/>eps : float<br ALIGN="LEFT"/>inc_stats1<br ALIGN="LEFT"/>inc_stats2<br ALIGN="LEFT"/>last_timestamp<br ALIGN="LEFT"/>sum_of_residual : ndarray<br ALIGN="LEFT"/>|all_stats_2D()<br ALIGN="LEFT"/>cov()<br ALIGN="LEFT"/>decay(t)<br ALIGN="LEFT"/>pcc()<br ALIGN="LEFT"/>update_cov(t, v)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.after_image.IncStatDB" [color="black", fontcolor="black", label=<{IncStatDB|decay_factors<br ALIGN="LEFT"/>limit : float<br ALIGN="LEFT"/>num_entries : int<br ALIGN="LEFT"/>num_updated : int<br ALIGN="LEFT"/>stat1d : dict<br ALIGN="LEFT"/>stat2d : dict<br ALIGN="LEFT"/>|clean_records(t)<br ALIGN="LEFT"/>update_get_link_stats(ID1, ID2, t, v)<br ALIGN="LEFT"/>update_get_stats_1D(ID, t, v)<br ALIGN="LEFT"/>update_get_stats_2D(ID1, ID2, t, v)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.pyflowmeter.IncStats" [color="black", fontcolor="black", label=<{IncStats|eps : float<br ALIGN="LEFT"/>m : int<br ALIGN="LEFT"/>m2 : int<br ALIGN="LEFT"/>m3 : int<br ALIGN="LEFT"/>m4 : int<br ALIGN="LEFT"/>max<br ALIGN="LEFT"/>min : float<br ALIGN="LEFT"/>n : int<br ALIGN="LEFT"/>|get_statistics()<br ALIGN="LEFT"/>update(x, verbose)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.after_image.NetStat" [color="black", fontcolor="black", label=<{NetStat|clean_up_round : int<br ALIGN="LEFT"/>decay_factors : list<br ALIGN="LEFT"/>inc_stat_db<br ALIGN="LEFT"/>last_timestamp : NoneType<br ALIGN="LEFT"/>|get_records(traffic_vectors)<br ALIGN="LEFT"/>update_get_stats(IPtype, srcMAC, dstMAC, srcIP, srcProtocol, dstIP, dstProtocol, timestamp, datagramSize, db)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.synthetic_graph_features.Node" [color="black", fontcolor="black", label=<{Node|dim<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>mean<br ALIGN="LEFT"/>rng<br ALIGN="LEFT"/>std<br ALIGN="LEFT"/>|gen_correlated_feature()<br ALIGN="LEFT"/>gen_random_feature()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.pyflowmeter.PyFlowMeter" [color="black", fontcolor="black", label=<{PyFlowMeter|check_interval : int<br ALIGN="LEFT"/>check_range : int<br ALIGN="LEFT"/>count<br ALIGN="LEFT"/>flags : list<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>offset_time : int<br ALIGN="LEFT"/>skipped<br ALIGN="LEFT"/>state : dict<br ALIGN="LEFT"/>timeout : int<br ALIGN="LEFT"/>written<br ALIGN="LEFT"/>|decode_flags(flag)<br ALIGN="LEFT"/>extract_features()<br ALIGN="LEFT"/>get_headers()<br ALIGN="LEFT"/>get_meta_headers()<br ALIGN="LEFT"/>get_traffic_vector(packet)<br ALIGN="LEFT"/><I>peek</I>(traffic_vectors)<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>teardown()<br ALIGN="LEFT"/>update(traffic_vector)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.pyflowmeter.StreamingInterface" [color="black", fontcolor="black", label=<{StreamingInterface|<br ALIGN="LEFT"/>|<I>attach</I>()<br ALIGN="LEFT"/><I>detach</I>()<br ALIGN="LEFT"/><I>start</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.synthetic_graph_features.SyntheticFeatureExtractor" [color="black", fontcolor="black", label=<{SyntheticFeatureExtractor|count : int<br ALIGN="LEFT"/>dataset_name<br ALIGN="LEFT"/>feature_file<br ALIGN="LEFT"/>file_name<br ALIGN="LEFT"/>g<br ALIGN="LEFT"/>meta_file<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|generate_features(n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.feature_extractors.after_image.AfterImage" -> "src.feature_extractors.base_feature_extractor.BaseTrafficFeatureExtractor" [arrowhead="empty", arrowtail="none"];
"src.feature_extractors.after_image_graph.AfterImageGraph" -> "src.feature_extractors.base_feature_extractor.BaseTrafficFeatureExtractor" [arrowhead="empty", arrowtail="none"];
"src.feature_extractors.pyflowmeter.PyFlowMeter" -> "src.feature_extractors.base_feature_extractor.BaseTrafficFeatureExtractor" [arrowhead="empty", arrowtail="none"];
"src.feature_extractors.after_image.IncStatDB" -> "src.feature_extractors.after_image.NetStat" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inc_stat_db", style="solid"];
"src.feature_extractors.after_image.NetStat" -> "src.feature_extractors.after_image.AfterImage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="state", style="solid"];
"src.feature_extractors.synthetic_graph_features.Graph" -> "src.feature_extractors.synthetic_graph_features.SyntheticFeatureExtractor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="g", style="solid"];
}
